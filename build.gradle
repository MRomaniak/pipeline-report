plugins {
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

test {
    finalizedBy jacocoTestReport

//    to include in report but do not calculate coverage
//    jacoco {
//        excludes += ['tk/idealist/pipeline/BuildReportApplication**']
//    }
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        csv.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/html')
        xml.outputLocation = layout.buildDirectory.dir('reports/jacoco/coverage.xml').get().asFile
        csv.outputLocation = layout.buildDirectory.dir('reports/jacoco/coverage.csv').get().asFile
    }

//    to exclude from report completely
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'tk/idealist/pipeline/BuildReportApplication.class')
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.80
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.75
            }
        }
    }
}

// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification
