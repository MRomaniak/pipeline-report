name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build with Gradle and Run Code Coverage Difference Report
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          gradle-version: 7.4.1
          arguments: build diffCoverage -x jacocoTestCoverageVerification

      - name: Archive test report
        uses: actions/upload-artifact@v2
        with:
          name: Test report
          path: build/reports/tests/test

      - name: Archive Jacoco report
        uses: actions/upload-artifact@v2
        with:
          name: Jacoco report
          path: build/reports/jacoco

      - name: Generate JaCoCo Badge (master)
        uses: cicirello/jacoco-badge-generator@v2
        if: ${{ github.ref == 'refs/heads/master' }}
        with:
          badges-directory: .github/badges
          jacoco-csv-file: build/reports/jacoco/coverage.csv
          generate-branches-badge: true
          generate-summary: true

      - name: Generate JaCoCo Badge (dev branch)
        uses: cicirello/jacoco-badge-generator@v2
        if: ${{ github.event_name == 'pull_request' }}
        with:
          badges-directory: .github/badges
          jacoco-csv-file: build/reports/jacoco/diffCoverage/report.csv
          generate-branches-badge: true
          generate-summary: true

      - name: Commit and push the coverage badges and summary file
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          cd .github/badges
          if [[ `git status --porcelain *.svg *.json` ]]; then
            git config --global user.name 'github-actions'
            git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
            git add *.svg *.json
            git commit -m "Autogenerated JaCoCo coverage badges" *.svg *.json
            git push
          fi

      - name: Comment on PR with coverage percentages
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          REPORT=$(<.github/badges/coverage-summary.json)
          COVERAGE=$(jq -r '.coverage' <<< "$REPORT")%
          BRANCHES=$(jq -r '.branches' <<< "$REPORT")%
          NEWLINE=$'\n'
          BODY="## JaCoCo Test Coverage Summary Statistics${NEWLINE}* __Coverage:__ ${COVERAGE}${NEWLINE}* __Branches:__ ${BRANCHES}"
          gh pr comment ${{github.event.pull_request.number}} -b "${BODY}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Code Coverage Rules
        run: |
          REPORT=$(<.github/badges/coverage-summary.json)
          COVERAGE=$(jq -r '.coverage|tonumber' <<< "$REPORT")
          BRANCHES=$(jq -r '.branches|tonumber' <<< "$REPORT")
          COVERAGE_FAILED="Code Coverage Rules is violated. Coverage for lines should be more or equals to 80% but is ${COVERAGE}%"
          BRANCHES_FAILED="Code Coverage Rules is violated. Coverage for branches should be more or equals to 75% but is ${BRANCHES}%"
          
          echo "COVERED = ${COVERAGE} -- ${BRANCHES}"
          
          echo $GITHUB_EVENT_PATH
          
          if [[ ${COVERAGE} -lt 80 ]]; then 
            echo ${COVERAGE_FAILED}
          fi
          if [[ ${BRANCHES} -lt 75 ]]; then 
            echo ${BRANCHES_FAILED}
          fi
          if [[ ${COVERAGE} -lt 80 || ${BRANCHES} -lt 75 ]]; then
            exit 1
          fi

      - name: Upload jar file
        uses: actions/upload-artifact@v2
        with:
          name: App JAR
          path: build/libs/pipeline-report.jar

  store_image:
    name: Store Docker image
    needs: build
    if: ${{ github.event.pull_request.merged && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download jar file
        uses: actions/download-artifact@master
        with:
          name: App JAR
          path: build/libs/pipeline-report.jar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: 0.1
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Log out of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
